// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
  // Ajout d'un chemin de sortie explicite pour éviter l'avertissement
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String    // Non optionnel pour éviter les migrations risquées
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  igAccounts     InstagramAccount[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InstagramAccount {
  id          String   @id @default(cuid())
  userId      String
  username    String
  password    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  instagramUserId String?  @map("instagram_user_id")

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations  Conversation[]

  @@unique([userId, username])
}

model Conversation {
  id                  String   @id @default(cuid())
  instagramAccountId  String
  participantUsername String
  lastMessageAt       DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())
  instagramThreadId   String?

  instagramAccount InstagramAccount @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)
  messages         Message[]

  @@unique([instagramAccountId, participantUsername])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  content        String   @db.Text
  isFromUser     Boolean  @default(false)
  // Ajout d'un champ pour l'horodatage qui sera utilisé dans l'interface
  sentAt         DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  aiResponses  AIResponse[]
}

model AIResponse {
  id                String    @id @default(cuid())
  messageId         String
  suggestedResponse String    @db.Text
  status            String    @default("pending") // pending, approved, rejected
  modifiedResponse  String?   @db.Text
  sentAt            DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model CronLog {
  id        String   @id @default(cuid())
  jobType   String
  status    String
  details   String?  @db.Text
  createdAt DateTime @default(now())
}
